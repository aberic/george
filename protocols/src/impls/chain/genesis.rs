// This file is generated by rust-protobuf 2.18.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `chain/genesis.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_2;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct GenesisConfig {
    // message fields
    pub genesis: ::protobuf::SingularPtrField<Genesis>,
    pub signet: ::protobuf::SingularPtrField<super::sign::Signet>,
    pub signet_pre: ::protobuf::SingularPtrField<super::sign::Signet>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GenesisConfig {
    fn default() -> &'a GenesisConfig {
        <GenesisConfig as ::protobuf::Message>::default_instance()
    }
}

impl GenesisConfig {
    pub fn new() -> GenesisConfig {
        ::std::default::Default::default()
    }

    // .chain.Genesis genesis = 1;


    pub fn get_genesis(&self) -> &Genesis {
        self.genesis.as_ref().unwrap_or_else(|| <Genesis as ::protobuf::Message>::default_instance())
    }
    pub fn clear_genesis(&mut self) {
        self.genesis.clear();
    }

    pub fn has_genesis(&self) -> bool {
        self.genesis.is_some()
    }

    // Param is passed by value, moved
    pub fn set_genesis(&mut self, v: Genesis) {
        self.genesis = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_genesis(&mut self) -> &mut Genesis {
        if self.genesis.is_none() {
            self.genesis.set_default();
        }
        self.genesis.as_mut().unwrap()
    }

    // Take field
    pub fn take_genesis(&mut self) -> Genesis {
        self.genesis.take().unwrap_or_else(|| Genesis::new())
    }

    // .chain.Signet signet = 2;


    pub fn get_signet(&self) -> &super::sign::Signet {
        self.signet.as_ref().unwrap_or_else(|| <super::sign::Signet as ::protobuf::Message>::default_instance())
    }
    pub fn clear_signet(&mut self) {
        self.signet.clear();
    }

    pub fn has_signet(&self) -> bool {
        self.signet.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signet(&mut self, v: super::sign::Signet) {
        self.signet = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signet(&mut self) -> &mut super::sign::Signet {
        if self.signet.is_none() {
            self.signet.set_default();
        }
        self.signet.as_mut().unwrap()
    }

    // Take field
    pub fn take_signet(&mut self) -> super::sign::Signet {
        self.signet.take().unwrap_or_else(|| super::sign::Signet::new())
    }

    // .chain.Signet signet_pre = 3;


    pub fn get_signet_pre(&self) -> &super::sign::Signet {
        self.signet_pre.as_ref().unwrap_or_else(|| <super::sign::Signet as ::protobuf::Message>::default_instance())
    }
    pub fn clear_signet_pre(&mut self) {
        self.signet_pre.clear();
    }

    pub fn has_signet_pre(&self) -> bool {
        self.signet_pre.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signet_pre(&mut self, v: super::sign::Signet) {
        self.signet_pre = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signet_pre(&mut self) -> &mut super::sign::Signet {
        if self.signet_pre.is_none() {
            self.signet_pre.set_default();
        }
        self.signet_pre.as_mut().unwrap()
    }

    // Take field
    pub fn take_signet_pre(&mut self) -> super::sign::Signet {
        self.signet_pre.take().unwrap_or_else(|| super::sign::Signet::new())
    }
}

impl ::protobuf::Message for GenesisConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.genesis {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.signet {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.signet_pre {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.genesis)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.signet)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.signet_pre)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.genesis.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.signet.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.signet_pre.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.genesis.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.signet.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.signet_pre.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GenesisConfig {
        GenesisConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Genesis>>(
                "genesis",
                |m: &GenesisConfig| { &m.genesis },
                |m: &mut GenesisConfig| { &mut m.genesis },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::sign::Signet>>(
                "signet",
                |m: &GenesisConfig| { &m.signet },
                |m: &mut GenesisConfig| { &mut m.signet },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::sign::Signet>>(
                "signet_pre",
                |m: &GenesisConfig| { &m.signet_pre },
                |m: &mut GenesisConfig| { &mut m.signet_pre },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GenesisConfig>(
                "GenesisConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GenesisConfig {
        static instance: ::protobuf::rt::LazyV2<GenesisConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GenesisConfig::new)
    }
}

impl ::protobuf::Clear for GenesisConfig {
    fn clear(&mut self) {
        self.genesis.clear();
        self.signet.clear();
        self.signet_pre.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GenesisConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenesisConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Genesis {
    // message fields
    pub organizations: ::protobuf::RepeatedField<super::organization::Organization>,
    pub foundation: ::protobuf::SingularPtrField<super::policy::Foundation>,
    pub policy: super::policy::Policy,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Genesis {
    fn default() -> &'a Genesis {
        <Genesis as ::protobuf::Message>::default_instance()
    }
}

impl Genesis {
    pub fn new() -> Genesis {
        ::std::default::Default::default()
    }

    // repeated .chain.Organization organizations = 1;


    pub fn get_organizations(&self) -> &[super::organization::Organization] {
        &self.organizations
    }
    pub fn clear_organizations(&mut self) {
        self.organizations.clear();
    }

    // Param is passed by value, moved
    pub fn set_organizations(&mut self, v: ::protobuf::RepeatedField<super::organization::Organization>) {
        self.organizations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_organizations(&mut self) -> &mut ::protobuf::RepeatedField<super::organization::Organization> {
        &mut self.organizations
    }

    // Take field
    pub fn take_organizations(&mut self) -> ::protobuf::RepeatedField<super::organization::Organization> {
        ::std::mem::replace(&mut self.organizations, ::protobuf::RepeatedField::new())
    }

    // .chain.Foundation foundation = 2;


    pub fn get_foundation(&self) -> &super::policy::Foundation {
        self.foundation.as_ref().unwrap_or_else(|| <super::policy::Foundation as ::protobuf::Message>::default_instance())
    }
    pub fn clear_foundation(&mut self) {
        self.foundation.clear();
    }

    pub fn has_foundation(&self) -> bool {
        self.foundation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_foundation(&mut self, v: super::policy::Foundation) {
        self.foundation = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_foundation(&mut self) -> &mut super::policy::Foundation {
        if self.foundation.is_none() {
            self.foundation.set_default();
        }
        self.foundation.as_mut().unwrap()
    }

    // Take field
    pub fn take_foundation(&mut self) -> super::policy::Foundation {
        self.foundation.take().unwrap_or_else(|| super::policy::Foundation::new())
    }

    // .chain.Policy policy = 3;


    pub fn get_policy(&self) -> super::policy::Policy {
        self.policy
    }
    pub fn clear_policy(&mut self) {
        self.policy = super::policy::Policy::Any;
    }

    // Param is passed by value, moved
    pub fn set_policy(&mut self, v: super::policy::Policy) {
        self.policy = v;
    }
}

impl ::protobuf::Message for Genesis {
    fn is_initialized(&self) -> bool {
        for v in &self.organizations {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.foundation {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.organizations)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.foundation)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.policy, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.organizations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.foundation.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.policy != super::policy::Policy::Any {
            my_size += ::protobuf::rt::enum_size(3, self.policy);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.organizations {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.foundation.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.policy != super::policy::Policy::Any {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.policy))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Genesis {
        Genesis::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::organization::Organization>>(
                "organizations",
                |m: &Genesis| { &m.organizations },
                |m: &mut Genesis| { &mut m.organizations },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::policy::Foundation>>(
                "foundation",
                |m: &Genesis| { &m.foundation },
                |m: &mut Genesis| { &mut m.foundation },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::policy::Policy>>(
                "policy",
                |m: &Genesis| { &m.policy },
                |m: &mut Genesis| { &mut m.policy },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Genesis>(
                "Genesis",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Genesis {
        static instance: ::protobuf::rt::LazyV2<Genesis> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Genesis::new)
    }
}

impl ::protobuf::Clear for Genesis {
    fn clear(&mut self) {
        self.organizations.clear();
        self.foundation.clear();
        self.policy = super::policy::Policy::Any;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Genesis {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Genesis {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13chain/genesis.proto\x12\x05chain\x1a\x18chain/organization.proto\
    \x1a\x12chain/policy.proto\x1a\x10chain/sign.proto\"\x8e\x01\n\rGenesisC\
    onfig\x12(\n\x07genesis\x18\x01\x20\x01(\x0b2\x0e.chain.GenesisR\x07gene\
    sis\x12%\n\x06signet\x18\x02\x20\x01(\x0b2\r.chain.SignetR\x06signet\x12\
    ,\n\nsignet_pre\x18\x03\x20\x01(\x0b2\r.chain.SignetR\tsignetPre\"\x9e\
    \x01\n\x07Genesis\x129\n\rorganizations\x18\x01\x20\x03(\x0b2\x13.chain.\
    OrganizationR\rorganizations\x121\n\nfoundation\x18\x02\x20\x01(\x0b2\
    \x11.chain.FoundationR\nfoundation\x12%\n\x06policy\x18\x03\x20\x01(\x0e\
    2\r.chain.PolicyR\x06policyBS\n\x20cn.aberic.george.protocols.chainB\x0c\
    GenesisProtoZ!github.com/george/protocols/chainb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
