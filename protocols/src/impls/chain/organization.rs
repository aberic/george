// This file is generated by rust-protobuf 2.18.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `chain/organization.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_2;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Organization {
    // message fields
    pub id: ::std::string::String,
    pub name: ::std::string::String,
    pub pk: ::std::string::String,
    pub root_cert: ::std::string::String,
    pub peers: ::protobuf::RepeatedField<super::peer::Peer>,
    pub genesis: bool,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Organization {
    fn default() -> &'a Organization {
        <Organization as ::protobuf::Message>::default_instance()
    }
}

impl Organization {
    pub fn new() -> Organization {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string pk = 3;


    pub fn get_pk(&self) -> &str {
        &self.pk
    }
    pub fn clear_pk(&mut self) {
        self.pk.clear();
    }

    // Param is passed by value, moved
    pub fn set_pk(&mut self, v: ::std::string::String) {
        self.pk = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pk(&mut self) -> &mut ::std::string::String {
        &mut self.pk
    }

    // Take field
    pub fn take_pk(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pk, ::std::string::String::new())
    }

    // string root_cert = 4;


    pub fn get_root_cert(&self) -> &str {
        &self.root_cert
    }
    pub fn clear_root_cert(&mut self) {
        self.root_cert.clear();
    }

    // Param is passed by value, moved
    pub fn set_root_cert(&mut self, v: ::std::string::String) {
        self.root_cert = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_root_cert(&mut self) -> &mut ::std::string::String {
        &mut self.root_cert
    }

    // Take field
    pub fn take_root_cert(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.root_cert, ::std::string::String::new())
    }

    // repeated .chain.Peer peers = 5;


    pub fn get_peers(&self) -> &[super::peer::Peer] {
        &self.peers
    }
    pub fn clear_peers(&mut self) {
        self.peers.clear();
    }

    // Param is passed by value, moved
    pub fn set_peers(&mut self, v: ::protobuf::RepeatedField<super::peer::Peer>) {
        self.peers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_peers(&mut self) -> &mut ::protobuf::RepeatedField<super::peer::Peer> {
        &mut self.peers
    }

    // Take field
    pub fn take_peers(&mut self) -> ::protobuf::RepeatedField<super::peer::Peer> {
        ::std::mem::replace(&mut self.peers, ::protobuf::RepeatedField::new())
    }

    // bool genesis = 6;


    pub fn get_genesis(&self) -> bool {
        self.genesis
    }
    pub fn clear_genesis(&mut self) {
        self.genesis = false;
    }

    // Param is passed by value, moved
    pub fn set_genesis(&mut self, v: bool) {
        self.genesis = v;
    }
}

impl ::protobuf::Message for Organization {
    fn is_initialized(&self) -> bool {
        for v in &self.peers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pk)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.root_cert)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.peers)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.genesis = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.pk.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.pk);
        }
        if !self.root_cert.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.root_cert);
        }
        for value in &self.peers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.genesis != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.pk.is_empty() {
            os.write_string(3, &self.pk)?;
        }
        if !self.root_cert.is_empty() {
            os.write_string(4, &self.root_cert)?;
        }
        for v in &self.peers {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.genesis != false {
            os.write_bool(6, self.genesis)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Organization {
        Organization::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &Organization| { &m.id },
                |m: &mut Organization| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Organization| { &m.name },
                |m: &mut Organization| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pk",
                |m: &Organization| { &m.pk },
                |m: &mut Organization| { &mut m.pk },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "root_cert",
                |m: &Organization| { &m.root_cert },
                |m: &mut Organization| { &mut m.root_cert },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::peer::Peer>>(
                "peers",
                |m: &Organization| { &m.peers },
                |m: &mut Organization| { &mut m.peers },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "genesis",
                |m: &Organization| { &m.genesis },
                |m: &mut Organization| { &mut m.genesis },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Organization>(
                "Organization",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Organization {
        static instance: ::protobuf::rt::LazyV2<Organization> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Organization::new)
    }
}

impl ::protobuf::Clear for Organization {
    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.pk.clear();
        self.root_cert.clear();
        self.peers.clear();
        self.genesis = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Organization {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Organization {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct OrganizationPolicy {
    // message fields
    pub id: ::std::string::String,
    pub consensus: bool,
    pub contract: bool,
    pub ledger: bool,
    pub peers: ::protobuf::RepeatedField<super::peer::PeerPolicy>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OrganizationPolicy {
    fn default() -> &'a OrganizationPolicy {
        <OrganizationPolicy as ::protobuf::Message>::default_instance()
    }
}

impl OrganizationPolicy {
    pub fn new() -> OrganizationPolicy {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // bool consensus = 2;


    pub fn get_consensus(&self) -> bool {
        self.consensus
    }
    pub fn clear_consensus(&mut self) {
        self.consensus = false;
    }

    // Param is passed by value, moved
    pub fn set_consensus(&mut self, v: bool) {
        self.consensus = v;
    }

    // bool contract = 3;


    pub fn get_contract(&self) -> bool {
        self.contract
    }
    pub fn clear_contract(&mut self) {
        self.contract = false;
    }

    // Param is passed by value, moved
    pub fn set_contract(&mut self, v: bool) {
        self.contract = v;
    }

    // bool ledger = 4;


    pub fn get_ledger(&self) -> bool {
        self.ledger
    }
    pub fn clear_ledger(&mut self) {
        self.ledger = false;
    }

    // Param is passed by value, moved
    pub fn set_ledger(&mut self, v: bool) {
        self.ledger = v;
    }

    // repeated .chain.PeerPolicy peers = 5;


    pub fn get_peers(&self) -> &[super::peer::PeerPolicy] {
        &self.peers
    }
    pub fn clear_peers(&mut self) {
        self.peers.clear();
    }

    // Param is passed by value, moved
    pub fn set_peers(&mut self, v: ::protobuf::RepeatedField<super::peer::PeerPolicy>) {
        self.peers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_peers(&mut self) -> &mut ::protobuf::RepeatedField<super::peer::PeerPolicy> {
        &mut self.peers
    }

    // Take field
    pub fn take_peers(&mut self) -> ::protobuf::RepeatedField<super::peer::PeerPolicy> {
        ::std::mem::replace(&mut self.peers, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for OrganizationPolicy {
    fn is_initialized(&self) -> bool {
        for v in &self.peers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.consensus = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.contract = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.ledger = tmp;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.peers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if self.consensus != false {
            my_size += 2;
        }
        if self.contract != false {
            my_size += 2;
        }
        if self.ledger != false {
            my_size += 2;
        }
        for value in &self.peers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if self.consensus != false {
            os.write_bool(2, self.consensus)?;
        }
        if self.contract != false {
            os.write_bool(3, self.contract)?;
        }
        if self.ledger != false {
            os.write_bool(4, self.ledger)?;
        }
        for v in &self.peers {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OrganizationPolicy {
        OrganizationPolicy::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &OrganizationPolicy| { &m.id },
                |m: &mut OrganizationPolicy| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "consensus",
                |m: &OrganizationPolicy| { &m.consensus },
                |m: &mut OrganizationPolicy| { &mut m.consensus },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "contract",
                |m: &OrganizationPolicy| { &m.contract },
                |m: &mut OrganizationPolicy| { &mut m.contract },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "ledger",
                |m: &OrganizationPolicy| { &m.ledger },
                |m: &mut OrganizationPolicy| { &mut m.ledger },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::peer::PeerPolicy>>(
                "peers",
                |m: &OrganizationPolicy| { &m.peers },
                |m: &mut OrganizationPolicy| { &mut m.peers },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OrganizationPolicy>(
                "OrganizationPolicy",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OrganizationPolicy {
        static instance: ::protobuf::rt::LazyV2<OrganizationPolicy> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OrganizationPolicy::new)
    }
}

impl ::protobuf::Clear for OrganizationPolicy {
    fn clear(&mut self) {
        self.id.clear();
        self.consensus = false;
        self.contract = false;
        self.ledger = false;
        self.peers.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OrganizationPolicy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OrganizationPolicy {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18chain/organization.proto\x12\x05chain\x1a\x10chain/peer.proto\"\
    \x9c\x01\n\x0cOrganization\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\
    \x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x12\x0e\n\x02pk\x18\x03\x20\
    \x01(\tR\x02pk\x12\x1b\n\troot_cert\x18\x04\x20\x01(\tR\x08rootCert\x12!\
    \n\x05peers\x18\x05\x20\x03(\x0b2\x0b.chain.PeerR\x05peers\x12\x18\n\x07\
    genesis\x18\x06\x20\x01(\x08R\x07genesis\"\x9f\x01\n\x12OrganizationPoli\
    cy\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x1c\n\tconsensus\x18\
    \x02\x20\x01(\x08R\tconsensus\x12\x1a\n\x08contract\x18\x03\x20\x01(\x08\
    R\x08contract\x12\x16\n\x06ledger\x18\x04\x20\x01(\x08R\x06ledger\x12'\n\
    \x05peers\x18\x05\x20\x03(\x0b2\x11.chain.PeerPolicyR\x05peersBX\n\x20cn\
    .aberic.george.protocols.chainB\x11OrganizationProtoZ!github.com/george/\
    protocols/chainb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
