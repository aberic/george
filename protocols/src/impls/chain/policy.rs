// This file is generated by rust-protobuf 2.18.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `src/protos/chain/policy.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_2;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Foundation {
    // message fields
    pub timeout: u32,
    pub block_size: u32,
    pub tx_count: u32,
    pub tx_size: u32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Foundation {
    fn default() -> &'a Foundation {
        <Foundation as ::protobuf::Message>::default_instance()
    }
}

impl Foundation {
    pub fn new() -> Foundation {
        ::std::default::Default::default()
    }

    // uint32 timeout = 1;


    pub fn get_timeout(&self) -> u32 {
        self.timeout
    }
    pub fn clear_timeout(&mut self) {
        self.timeout = 0;
    }

    // Param is passed by value, moved
    pub fn set_timeout(&mut self, v: u32) {
        self.timeout = v;
    }

    // uint32 block_size = 2;


    pub fn get_block_size(&self) -> u32 {
        self.block_size
    }
    pub fn clear_block_size(&mut self) {
        self.block_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_block_size(&mut self, v: u32) {
        self.block_size = v;
    }

    // uint32 tx_count = 3;


    pub fn get_tx_count(&self) -> u32 {
        self.tx_count
    }
    pub fn clear_tx_count(&mut self) {
        self.tx_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_tx_count(&mut self, v: u32) {
        self.tx_count = v;
    }

    // uint32 tx_size = 4;


    pub fn get_tx_size(&self) -> u32 {
        self.tx_size
    }
    pub fn clear_tx_size(&mut self) {
        self.tx_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_tx_size(&mut self, v: u32) {
        self.tx_size = v;
    }
}

impl ::protobuf::Message for Foundation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.timeout = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.block_size = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.tx_count = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.tx_size = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.timeout != 0 {
            my_size += ::protobuf::rt::value_size(1, self.timeout, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.block_size != 0 {
            my_size += ::protobuf::rt::value_size(2, self.block_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tx_count != 0 {
            my_size += ::protobuf::rt::value_size(3, self.tx_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tx_size != 0 {
            my_size += ::protobuf::rt::value_size(4, self.tx_size, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.timeout != 0 {
            os.write_uint32(1, self.timeout)?;
        }
        if self.block_size != 0 {
            os.write_uint32(2, self.block_size)?;
        }
        if self.tx_count != 0 {
            os.write_uint32(3, self.tx_count)?;
        }
        if self.tx_size != 0 {
            os.write_uint32(4, self.tx_size)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Foundation {
        Foundation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "timeout",
                |m: &Foundation| { &m.timeout },
                |m: &mut Foundation| { &mut m.timeout },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "block_size",
                |m: &Foundation| { &m.block_size },
                |m: &mut Foundation| { &mut m.block_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "tx_count",
                |m: &Foundation| { &m.tx_count },
                |m: &mut Foundation| { &mut m.tx_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "tx_size",
                |m: &Foundation| { &m.tx_size },
                |m: &mut Foundation| { &mut m.tx_size },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Foundation>(
                "Foundation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Foundation {
        static instance: ::protobuf::rt::LazyV2<Foundation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Foundation::new)
    }
}

impl ::protobuf::Clear for Foundation {
    fn clear(&mut self) {
        self.timeout = 0;
        self.block_size = 0;
        self.tx_count = 0;
        self.tx_size = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Foundation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Foundation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct UpgradePolicy {
    // message fields
    pub contract: Policy,
    pub ledger: Policy,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpgradePolicy {
    fn default() -> &'a UpgradePolicy {
        <UpgradePolicy as ::protobuf::Message>::default_instance()
    }
}

impl UpgradePolicy {
    pub fn new() -> UpgradePolicy {
        ::std::default::Default::default()
    }

    // .chain.Policy contract = 1;


    pub fn get_contract(&self) -> Policy {
        self.contract
    }
    pub fn clear_contract(&mut self) {
        self.contract = Policy::Any;
    }

    // Param is passed by value, moved
    pub fn set_contract(&mut self, v: Policy) {
        self.contract = v;
    }

    // .chain.Policy ledger = 2;


    pub fn get_ledger(&self) -> Policy {
        self.ledger
    }
    pub fn clear_ledger(&mut self) {
        self.ledger = Policy::Any;
    }

    // Param is passed by value, moved
    pub fn set_ledger(&mut self, v: Policy) {
        self.ledger = v;
    }
}

impl ::protobuf::Message for UpgradePolicy {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.contract, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.ledger, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.contract != Policy::Any {
            my_size += ::protobuf::rt::enum_size(1, self.contract);
        }
        if self.ledger != Policy::Any {
            my_size += ::protobuf::rt::enum_size(2, self.ledger);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.contract != Policy::Any {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.contract))?;
        }
        if self.ledger != Policy::Any {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.ledger))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpgradePolicy {
        UpgradePolicy::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Policy>>(
                "contract",
                |m: &UpgradePolicy| { &m.contract },
                |m: &mut UpgradePolicy| { &mut m.contract },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Policy>>(
                "ledger",
                |m: &UpgradePolicy| { &m.ledger },
                |m: &mut UpgradePolicy| { &mut m.ledger },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpgradePolicy>(
                "UpgradePolicy",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpgradePolicy {
        static instance: ::protobuf::rt::LazyV2<UpgradePolicy> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpgradePolicy::new)
    }
}

impl ::protobuf::Clear for UpgradePolicy {
    fn clear(&mut self) {
        self.contract = Policy::Any;
        self.ledger = Policy::Any;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpgradePolicy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpgradePolicy {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub enum Policy {
    Any = 0,
    Majority = 1,
    All = 2,
}

impl ::protobuf::ProtobufEnum for Policy {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Policy> {
        match value {
            0 => ::std::option::Option::Some(Policy::Any),
            1 => ::std::option::Option::Some(Policy::Majority),
            2 => ::std::option::Option::Some(Policy::All),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Policy] = &[
            Policy::Any,
            Policy::Majority,
            Policy::All,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Policy>("Policy", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Policy {
}

impl ::std::default::Default for Policy {
    fn default() -> Self {
        Policy::Any
    }
}

impl ::protobuf::reflect::ProtobufValue for Policy {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dsrc/protos/chain/policy.proto\x12\x05chain\"y\n\nFoundation\x12\
    \x18\n\x07timeout\x18\x01\x20\x01(\rR\x07timeout\x12\x1d\n\nblock_size\
    \x18\x02\x20\x01(\rR\tblockSize\x12\x19\n\x08tx_count\x18\x03\x20\x01(\r\
    R\x07txCount\x12\x17\n\x07tx_size\x18\x04\x20\x01(\rR\x06txSize\"a\n\rUp\
    gradePolicy\x12)\n\x08contract\x18\x01\x20\x01(\x0e2\r.chain.PolicyR\x08\
    contract\x12%\n\x06ledger\x18\x02\x20\x01(\x0e2\r.chain.PolicyR\x06ledge\
    r*(\n\x06Policy\x12\x07\n\x03Any\x10\0\x12\x0c\n\x08Majority\x10\x01\x12\
    \x07\n\x03All\x10\x02BR\n\x20cn.aberic.george.protocols.chainB\x0bPolicy\
    ProtoZ!github.com/george/protocols/chainb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
