// This file is generated by rust-protobuf 2.18.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `comm/response.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_2;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Response {
    // message fields
    pub status: Status,
    pub msg_err: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Response {
    fn default() -> &'a Response {
        <Response as ::protobuf::Message>::default_instance()
    }
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    // .comm.Status status = 1;


    pub fn get_status(&self) -> Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = Status::Ok;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: Status) {
        self.status = v;
    }

    // string msg_err = 2;


    pub fn get_msg_err(&self) -> &str {
        &self.msg_err
    }
    pub fn clear_msg_err(&mut self) {
        self.msg_err.clear();
    }

    // Param is passed by value, moved
    pub fn set_msg_err(&mut self, v: ::std::string::String) {
        self.msg_err = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_msg_err(&mut self) -> &mut ::std::string::String {
        &mut self.msg_err
    }

    // Take field
    pub fn take_msg_err(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.msg_err, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.msg_err)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != Status::Ok {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        if !self.msg_err.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.msg_err);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != Status::Ok {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        if !self.msg_err.is_empty() {
            os.write_string(2, &self.msg_err)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Response {
        Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Status>>(
                "status",
                |m: &Response| { &m.status },
                |m: &mut Response| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "msg_err",
                |m: &Response| { &m.msg_err },
                |m: &mut Response| { &mut m.msg_err },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Response>(
                "Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Response {
        static instance: ::protobuf::rt::LazyV2<Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Response::new)
    }
}

impl ::protobuf::Clear for Response {
    fn clear(&mut self) {
        self.status = Status::Ok;
        self.msg_err.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub enum Status {
    Ok = 0,
    Cancelled = 1,
    Unknown = 2,
    Argument = 3,
    DeadlineExceeded = 4,
    NotFound = 5,
    AlreadyExists = 6,
    PermissionDenied = 7,
    Unauthenticated = 8,
    ResourceExhausted = 9,
    FailedPrecondition = 10,
    Aborted = 11,
    OutOfRange = 12,
    Unimplemented = 13,
    Internal = 14,
    Unavailable = 15,
    DataLoss = 16,
    Custom = 17,
}

impl ::protobuf::ProtobufEnum for Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Status> {
        match value {
            0 => ::std::option::Option::Some(Status::Ok),
            1 => ::std::option::Option::Some(Status::Cancelled),
            2 => ::std::option::Option::Some(Status::Unknown),
            3 => ::std::option::Option::Some(Status::Argument),
            4 => ::std::option::Option::Some(Status::DeadlineExceeded),
            5 => ::std::option::Option::Some(Status::NotFound),
            6 => ::std::option::Option::Some(Status::AlreadyExists),
            7 => ::std::option::Option::Some(Status::PermissionDenied),
            8 => ::std::option::Option::Some(Status::Unauthenticated),
            9 => ::std::option::Option::Some(Status::ResourceExhausted),
            10 => ::std::option::Option::Some(Status::FailedPrecondition),
            11 => ::std::option::Option::Some(Status::Aborted),
            12 => ::std::option::Option::Some(Status::OutOfRange),
            13 => ::std::option::Option::Some(Status::Unimplemented),
            14 => ::std::option::Option::Some(Status::Internal),
            15 => ::std::option::Option::Some(Status::Unavailable),
            16 => ::std::option::Option::Some(Status::DataLoss),
            17 => ::std::option::Option::Some(Status::Custom),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Status] = &[
            Status::Ok,
            Status::Cancelled,
            Status::Unknown,
            Status::Argument,
            Status::DeadlineExceeded,
            Status::NotFound,
            Status::AlreadyExists,
            Status::PermissionDenied,
            Status::Unauthenticated,
            Status::ResourceExhausted,
            Status::FailedPrecondition,
            Status::Aborted,
            Status::OutOfRange,
            Status::Unimplemented,
            Status::Internal,
            Status::Unavailable,
            Status::DataLoss,
            Status::Custom,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Status>("Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Status {
}

impl ::std::default::Default for Status {
    fn default() -> Self {
        Status::Ok
    }
}

impl ::protobuf::reflect::ProtobufValue for Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13comm/response.proto\x12\x04comm\"I\n\x08Response\x12$\n\x06status\
    \x18\x01\x20\x01(\x0e2\x0c.comm.StatusR\x06status\x12\x17\n\x07msg_err\
    \x18\x02\x20\x01(\tR\x06msgErr*\xb4\x02\n\x06Status\x12\x06\n\x02Ok\x10\
    \0\x12\r\n\tCancelled\x10\x01\x12\x0b\n\x07Unknown\x10\x02\x12\x0c\n\x08\
    Argument\x10\x03\x12\x14\n\x10DeadlineExceeded\x10\x04\x12\x0c\n\x08NotF\
    ound\x10\x05\x12\x11\n\rAlreadyExists\x10\x06\x12\x14\n\x10PermissionDen\
    ied\x10\x07\x12\x13\n\x0fUnauthenticated\x10\x08\x12\x15\n\x11ResourceEx\
    hausted\x10\t\x12\x16\n\x12FailedPrecondition\x10\n\x12\x0b\n\x07Aborted\
    \x10\x0b\x12\x0e\n\nOutOfRange\x10\x0c\x12\x11\n\rUnimplemented\x10\r\
    \x12\x0c\n\x08Internal\x10\x0e\x12\x0f\n\x0bUnavailable\x10\x0f\x12\x0c\
    \n\x08DataLoss\x10\x10\x12\n\n\x06Custom\x10\x11BR\n\x1fcn.aberic.george\
    .protocols.commB\rResponseProtoZ\x20github.com/george/protocols/commb\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
