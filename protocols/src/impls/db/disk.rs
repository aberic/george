// This file is generated by rust-protobuf 2.18.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `db/disk.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_2;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RequestDiskInto {
    // message fields
    pub database_name: ::std::string::String,
    pub view_name: ::std::string::String,
    pub key: ::std::string::String,
    pub value: ::std::vec::Vec<u8>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RequestDiskInto {
    fn default() -> &'a RequestDiskInto {
        <RequestDiskInto as ::protobuf::Message>::default_instance()
    }
}

impl RequestDiskInto {
    pub fn new() -> RequestDiskInto {
        ::std::default::Default::default()
    }

    // string database_name = 1;


    pub fn get_database_name(&self) -> &str {
        &self.database_name
    }
    pub fn clear_database_name(&mut self) {
        self.database_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_database_name(&mut self, v: ::std::string::String) {
        self.database_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_database_name(&mut self) -> &mut ::std::string::String {
        &mut self.database_name
    }

    // Take field
    pub fn take_database_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.database_name, ::std::string::String::new())
    }

    // string view_name = 2;


    pub fn get_view_name(&self) -> &str {
        &self.view_name
    }
    pub fn clear_view_name(&mut self) {
        self.view_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_view_name(&mut self, v: ::std::string::String) {
        self.view_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_view_name(&mut self) -> &mut ::std::string::String {
        &mut self.view_name
    }

    // Take field
    pub fn take_view_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.view_name, ::std::string::String::new())
    }

    // string key = 3;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    // bytes value = 4;


    pub fn get_value(&self) -> &[u8] {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.value, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for RequestDiskInto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.database_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.view_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.database_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.database_name);
        }
        if !self.view_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.view_name);
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.database_name.is_empty() {
            os.write_string(1, &self.database_name)?;
        }
        if !self.view_name.is_empty() {
            os.write_string(2, &self.view_name)?;
        }
        if !self.key.is_empty() {
            os.write_string(3, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_bytes(4, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestDiskInto {
        RequestDiskInto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "database_name",
                |m: &RequestDiskInto| { &m.database_name },
                |m: &mut RequestDiskInto| { &mut m.database_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "view_name",
                |m: &RequestDiskInto| { &m.view_name },
                |m: &mut RequestDiskInto| { &mut m.view_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key",
                |m: &RequestDiskInto| { &m.key },
                |m: &mut RequestDiskInto| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "value",
                |m: &RequestDiskInto| { &m.value },
                |m: &mut RequestDiskInto| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RequestDiskInto>(
                "RequestDiskInto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RequestDiskInto {
        static instance: ::protobuf::rt::LazyV2<RequestDiskInto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RequestDiskInto::new)
    }
}

impl ::protobuf::Clear for RequestDiskInto {
    fn clear(&mut self) {
        self.database_name.clear();
        self.view_name.clear();
        self.key.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestDiskInto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestDiskInto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RequestDiskOut {
    // message fields
    pub database_name: ::std::string::String,
    pub view_name: ::std::string::String,
    pub key: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RequestDiskOut {
    fn default() -> &'a RequestDiskOut {
        <RequestDiskOut as ::protobuf::Message>::default_instance()
    }
}

impl RequestDiskOut {
    pub fn new() -> RequestDiskOut {
        ::std::default::Default::default()
    }

    // string database_name = 1;


    pub fn get_database_name(&self) -> &str {
        &self.database_name
    }
    pub fn clear_database_name(&mut self) {
        self.database_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_database_name(&mut self, v: ::std::string::String) {
        self.database_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_database_name(&mut self) -> &mut ::std::string::String {
        &mut self.database_name
    }

    // Take field
    pub fn take_database_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.database_name, ::std::string::String::new())
    }

    // string view_name = 2;


    pub fn get_view_name(&self) -> &str {
        &self.view_name
    }
    pub fn clear_view_name(&mut self) {
        self.view_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_view_name(&mut self, v: ::std::string::String) {
        self.view_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_view_name(&mut self) -> &mut ::std::string::String {
        &mut self.view_name
    }

    // Take field
    pub fn take_view_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.view_name, ::std::string::String::new())
    }

    // string key = 3;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RequestDiskOut {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.database_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.view_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.database_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.database_name);
        }
        if !self.view_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.view_name);
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.database_name.is_empty() {
            os.write_string(1, &self.database_name)?;
        }
        if !self.view_name.is_empty() {
            os.write_string(2, &self.view_name)?;
        }
        if !self.key.is_empty() {
            os.write_string(3, &self.key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestDiskOut {
        RequestDiskOut::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "database_name",
                |m: &RequestDiskOut| { &m.database_name },
                |m: &mut RequestDiskOut| { &mut m.database_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "view_name",
                |m: &RequestDiskOut| { &m.view_name },
                |m: &mut RequestDiskOut| { &mut m.view_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key",
                |m: &RequestDiskOut| { &m.key },
                |m: &mut RequestDiskOut| { &mut m.key },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RequestDiskOut>(
                "RequestDiskOut",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RequestDiskOut {
        static instance: ::protobuf::rt::LazyV2<RequestDiskOut> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RequestDiskOut::new)
    }
}

impl ::protobuf::Clear for RequestDiskOut {
    fn clear(&mut self) {
        self.database_name.clear();
        self.view_name.clear();
        self.key.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestDiskOut {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestDiskOut {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RequestDiskIOut {
    // message fields
    pub database_name: ::std::string::String,
    pub view_name: ::std::string::String,
    pub index_name: ::std::string::String,
    pub key: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RequestDiskIOut {
    fn default() -> &'a RequestDiskIOut {
        <RequestDiskIOut as ::protobuf::Message>::default_instance()
    }
}

impl RequestDiskIOut {
    pub fn new() -> RequestDiskIOut {
        ::std::default::Default::default()
    }

    // string database_name = 1;


    pub fn get_database_name(&self) -> &str {
        &self.database_name
    }
    pub fn clear_database_name(&mut self) {
        self.database_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_database_name(&mut self, v: ::std::string::String) {
        self.database_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_database_name(&mut self) -> &mut ::std::string::String {
        &mut self.database_name
    }

    // Take field
    pub fn take_database_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.database_name, ::std::string::String::new())
    }

    // string view_name = 2;


    pub fn get_view_name(&self) -> &str {
        &self.view_name
    }
    pub fn clear_view_name(&mut self) {
        self.view_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_view_name(&mut self, v: ::std::string::String) {
        self.view_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_view_name(&mut self) -> &mut ::std::string::String {
        &mut self.view_name
    }

    // Take field
    pub fn take_view_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.view_name, ::std::string::String::new())
    }

    // string index_name = 3;


    pub fn get_index_name(&self) -> &str {
        &self.index_name
    }
    pub fn clear_index_name(&mut self) {
        self.index_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_index_name(&mut self, v: ::std::string::String) {
        self.index_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_index_name(&mut self) -> &mut ::std::string::String {
        &mut self.index_name
    }

    // Take field
    pub fn take_index_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.index_name, ::std::string::String::new())
    }

    // string key = 4;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RequestDiskIOut {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.database_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.view_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.index_name)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.database_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.database_name);
        }
        if !self.view_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.view_name);
        }
        if !self.index_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.index_name);
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.database_name.is_empty() {
            os.write_string(1, &self.database_name)?;
        }
        if !self.view_name.is_empty() {
            os.write_string(2, &self.view_name)?;
        }
        if !self.index_name.is_empty() {
            os.write_string(3, &self.index_name)?;
        }
        if !self.key.is_empty() {
            os.write_string(4, &self.key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestDiskIOut {
        RequestDiskIOut::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "database_name",
                |m: &RequestDiskIOut| { &m.database_name },
                |m: &mut RequestDiskIOut| { &mut m.database_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "view_name",
                |m: &RequestDiskIOut| { &m.view_name },
                |m: &mut RequestDiskIOut| { &mut m.view_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "index_name",
                |m: &RequestDiskIOut| { &m.index_name },
                |m: &mut RequestDiskIOut| { &mut m.index_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key",
                |m: &RequestDiskIOut| { &m.key },
                |m: &mut RequestDiskIOut| { &mut m.key },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RequestDiskIOut>(
                "RequestDiskIOut",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RequestDiskIOut {
        static instance: ::protobuf::rt::LazyV2<RequestDiskIOut> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RequestDiskIOut::new)
    }
}

impl ::protobuf::Clear for RequestDiskIOut {
    fn clear(&mut self) {
        self.database_name.clear();
        self.view_name.clear();
        self.index_name.clear();
        self.key.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestDiskIOut {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestDiskIOut {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct ResponseDiskOut {
    // message fields
    pub status: super::response::Status,
    pub msg_err: ::std::string::String,
    pub value: ::std::vec::Vec<u8>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ResponseDiskOut {
    fn default() -> &'a ResponseDiskOut {
        <ResponseDiskOut as ::protobuf::Message>::default_instance()
    }
}

impl ResponseDiskOut {
    pub fn new() -> ResponseDiskOut {
        ::std::default::Default::default()
    }

    // .comm.Status status = 1;


    pub fn get_status(&self) -> super::response::Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = super::response::Status::Ok;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: super::response::Status) {
        self.status = v;
    }

    // string msg_err = 2;


    pub fn get_msg_err(&self) -> &str {
        &self.msg_err
    }
    pub fn clear_msg_err(&mut self) {
        self.msg_err.clear();
    }

    // Param is passed by value, moved
    pub fn set_msg_err(&mut self, v: ::std::string::String) {
        self.msg_err = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_msg_err(&mut self) -> &mut ::std::string::String {
        &mut self.msg_err
    }

    // Take field
    pub fn take_msg_err(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.msg_err, ::std::string::String::new())
    }

    // bytes value = 3;


    pub fn get_value(&self) -> &[u8] {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.value, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ResponseDiskOut {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.msg_err)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != super::response::Status::Ok {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        if !self.msg_err.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.msg_err);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != super::response::Status::Ok {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        if !self.msg_err.is_empty() {
            os.write_string(2, &self.msg_err)?;
        }
        if !self.value.is_empty() {
            os.write_bytes(3, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResponseDiskOut {
        ResponseDiskOut::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::response::Status>>(
                "status",
                |m: &ResponseDiskOut| { &m.status },
                |m: &mut ResponseDiskOut| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "msg_err",
                |m: &ResponseDiskOut| { &m.msg_err },
                |m: &mut ResponseDiskOut| { &mut m.msg_err },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "value",
                |m: &ResponseDiskOut| { &m.value },
                |m: &mut ResponseDiskOut| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ResponseDiskOut>(
                "ResponseDiskOut",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ResponseDiskOut {
        static instance: ::protobuf::rt::LazyV2<ResponseDiskOut> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ResponseDiskOut::new)
    }
}

impl ::protobuf::Clear for ResponseDiskOut {
    fn clear(&mut self) {
        self.status = super::response::Status::Ok;
        self.msg_err.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResponseDiskOut {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResponseDiskOut {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RequestDiskRemove {
    // message fields
    pub database_name: ::std::string::String,
    pub view_name: ::std::string::String,
    pub key: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RequestDiskRemove {
    fn default() -> &'a RequestDiskRemove {
        <RequestDiskRemove as ::protobuf::Message>::default_instance()
    }
}

impl RequestDiskRemove {
    pub fn new() -> RequestDiskRemove {
        ::std::default::Default::default()
    }

    // string database_name = 1;


    pub fn get_database_name(&self) -> &str {
        &self.database_name
    }
    pub fn clear_database_name(&mut self) {
        self.database_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_database_name(&mut self, v: ::std::string::String) {
        self.database_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_database_name(&mut self) -> &mut ::std::string::String {
        &mut self.database_name
    }

    // Take field
    pub fn take_database_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.database_name, ::std::string::String::new())
    }

    // string view_name = 2;


    pub fn get_view_name(&self) -> &str {
        &self.view_name
    }
    pub fn clear_view_name(&mut self) {
        self.view_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_view_name(&mut self, v: ::std::string::String) {
        self.view_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_view_name(&mut self) -> &mut ::std::string::String {
        &mut self.view_name
    }

    // Take field
    pub fn take_view_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.view_name, ::std::string::String::new())
    }

    // string key = 3;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RequestDiskRemove {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.database_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.view_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.database_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.database_name);
        }
        if !self.view_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.view_name);
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.database_name.is_empty() {
            os.write_string(1, &self.database_name)?;
        }
        if !self.view_name.is_empty() {
            os.write_string(2, &self.view_name)?;
        }
        if !self.key.is_empty() {
            os.write_string(3, &self.key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestDiskRemove {
        RequestDiskRemove::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "database_name",
                |m: &RequestDiskRemove| { &m.database_name },
                |m: &mut RequestDiskRemove| { &mut m.database_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "view_name",
                |m: &RequestDiskRemove| { &m.view_name },
                |m: &mut RequestDiskRemove| { &mut m.view_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key",
                |m: &RequestDiskRemove| { &m.key },
                |m: &mut RequestDiskRemove| { &mut m.key },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RequestDiskRemove>(
                "RequestDiskRemove",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RequestDiskRemove {
        static instance: ::protobuf::rt::LazyV2<RequestDiskRemove> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RequestDiskRemove::new)
    }
}

impl ::protobuf::Clear for RequestDiskRemove {
    fn clear(&mut self) {
        self.database_name.clear();
        self.view_name.clear();
        self.key.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestDiskRemove {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestDiskRemove {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RequestDiskSelect {
    // message fields
    pub database_name: ::std::string::String,
    pub view_name: ::std::string::String,
    pub constraint_json_bytes: ::std::vec::Vec<u8>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RequestDiskSelect {
    fn default() -> &'a RequestDiskSelect {
        <RequestDiskSelect as ::protobuf::Message>::default_instance()
    }
}

impl RequestDiskSelect {
    pub fn new() -> RequestDiskSelect {
        ::std::default::Default::default()
    }

    // string database_name = 1;


    pub fn get_database_name(&self) -> &str {
        &self.database_name
    }
    pub fn clear_database_name(&mut self) {
        self.database_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_database_name(&mut self, v: ::std::string::String) {
        self.database_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_database_name(&mut self) -> &mut ::std::string::String {
        &mut self.database_name
    }

    // Take field
    pub fn take_database_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.database_name, ::std::string::String::new())
    }

    // string view_name = 2;


    pub fn get_view_name(&self) -> &str {
        &self.view_name
    }
    pub fn clear_view_name(&mut self) {
        self.view_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_view_name(&mut self, v: ::std::string::String) {
        self.view_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_view_name(&mut self) -> &mut ::std::string::String {
        &mut self.view_name
    }

    // Take field
    pub fn take_view_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.view_name, ::std::string::String::new())
    }

    // bytes constraint_json_bytes = 3;


    pub fn get_constraint_json_bytes(&self) -> &[u8] {
        &self.constraint_json_bytes
    }
    pub fn clear_constraint_json_bytes(&mut self) {
        self.constraint_json_bytes.clear();
    }

    // Param is passed by value, moved
    pub fn set_constraint_json_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.constraint_json_bytes = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_constraint_json_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.constraint_json_bytes
    }

    // Take field
    pub fn take_constraint_json_bytes(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.constraint_json_bytes, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for RequestDiskSelect {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.database_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.view_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.constraint_json_bytes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.database_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.database_name);
        }
        if !self.view_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.view_name);
        }
        if !self.constraint_json_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.constraint_json_bytes);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.database_name.is_empty() {
            os.write_string(1, &self.database_name)?;
        }
        if !self.view_name.is_empty() {
            os.write_string(2, &self.view_name)?;
        }
        if !self.constraint_json_bytes.is_empty() {
            os.write_bytes(3, &self.constraint_json_bytes)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestDiskSelect {
        RequestDiskSelect::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "database_name",
                |m: &RequestDiskSelect| { &m.database_name },
                |m: &mut RequestDiskSelect| { &mut m.database_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "view_name",
                |m: &RequestDiskSelect| { &m.view_name },
                |m: &mut RequestDiskSelect| { &mut m.view_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "constraint_json_bytes",
                |m: &RequestDiskSelect| { &m.constraint_json_bytes },
                |m: &mut RequestDiskSelect| { &mut m.constraint_json_bytes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RequestDiskSelect>(
                "RequestDiskSelect",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RequestDiskSelect {
        static instance: ::protobuf::rt::LazyV2<RequestDiskSelect> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RequestDiskSelect::new)
    }
}

impl ::protobuf::Clear for RequestDiskSelect {
    fn clear(&mut self) {
        self.database_name.clear();
        self.view_name.clear();
        self.constraint_json_bytes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestDiskSelect {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestDiskSelect {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct ResponseDiskSelect {
    // message fields
    pub status: super::response::Status,
    pub msg_err: ::std::string::String,
    pub selected: ::protobuf::SingularPtrField<DiskSelected>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ResponseDiskSelect {
    fn default() -> &'a ResponseDiskSelect {
        <ResponseDiskSelect as ::protobuf::Message>::default_instance()
    }
}

impl ResponseDiskSelect {
    pub fn new() -> ResponseDiskSelect {
        ::std::default::Default::default()
    }

    // .comm.Status status = 1;


    pub fn get_status(&self) -> super::response::Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = super::response::Status::Ok;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: super::response::Status) {
        self.status = v;
    }

    // string msg_err = 2;


    pub fn get_msg_err(&self) -> &str {
        &self.msg_err
    }
    pub fn clear_msg_err(&mut self) {
        self.msg_err.clear();
    }

    // Param is passed by value, moved
    pub fn set_msg_err(&mut self, v: ::std::string::String) {
        self.msg_err = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_msg_err(&mut self) -> &mut ::std::string::String {
        &mut self.msg_err
    }

    // Take field
    pub fn take_msg_err(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.msg_err, ::std::string::String::new())
    }

    // .db.DiskSelected selected = 3;


    pub fn get_selected(&self) -> &DiskSelected {
        self.selected.as_ref().unwrap_or_else(|| <DiskSelected as ::protobuf::Message>::default_instance())
    }
    pub fn clear_selected(&mut self) {
        self.selected.clear();
    }

    pub fn has_selected(&self) -> bool {
        self.selected.is_some()
    }

    // Param is passed by value, moved
    pub fn set_selected(&mut self, v: DiskSelected) {
        self.selected = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_selected(&mut self) -> &mut DiskSelected {
        if self.selected.is_none() {
            self.selected.set_default();
        }
        self.selected.as_mut().unwrap()
    }

    // Take field
    pub fn take_selected(&mut self) -> DiskSelected {
        self.selected.take().unwrap_or_else(|| DiskSelected::new())
    }
}

impl ::protobuf::Message for ResponseDiskSelect {
    fn is_initialized(&self) -> bool {
        for v in &self.selected {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.msg_err)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.selected)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != super::response::Status::Ok {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        if !self.msg_err.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.msg_err);
        }
        if let Some(ref v) = self.selected.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != super::response::Status::Ok {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        if !self.msg_err.is_empty() {
            os.write_string(2, &self.msg_err)?;
        }
        if let Some(ref v) = self.selected.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResponseDiskSelect {
        ResponseDiskSelect::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::response::Status>>(
                "status",
                |m: &ResponseDiskSelect| { &m.status },
                |m: &mut ResponseDiskSelect| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "msg_err",
                |m: &ResponseDiskSelect| { &m.msg_err },
                |m: &mut ResponseDiskSelect| { &mut m.msg_err },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DiskSelected>>(
                "selected",
                |m: &ResponseDiskSelect| { &m.selected },
                |m: &mut ResponseDiskSelect| { &mut m.selected },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ResponseDiskSelect>(
                "ResponseDiskSelect",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ResponseDiskSelect {
        static instance: ::protobuf::rt::LazyV2<ResponseDiskSelect> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ResponseDiskSelect::new)
    }
}

impl ::protobuf::Clear for ResponseDiskSelect {
    fn clear(&mut self) {
        self.status = super::response::Status::Ok;
        self.msg_err.clear();
        self.selected.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResponseDiskSelect {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResponseDiskSelect {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct DiskSelected {
    // message fields
    pub total: u64,
    pub count: u64,
    pub index_name: ::std::string::String,
    pub asc: bool,
    pub values: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DiskSelected {
    fn default() -> &'a DiskSelected {
        <DiskSelected as ::protobuf::Message>::default_instance()
    }
}

impl DiskSelected {
    pub fn new() -> DiskSelected {
        ::std::default::Default::default()
    }

    // uint64 total = 1;


    pub fn get_total(&self) -> u64 {
        self.total
    }
    pub fn clear_total(&mut self) {
        self.total = 0;
    }

    // Param is passed by value, moved
    pub fn set_total(&mut self, v: u64) {
        self.total = v;
    }

    // uint64 count = 2;


    pub fn get_count(&self) -> u64 {
        self.count
    }
    pub fn clear_count(&mut self) {
        self.count = 0;
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: u64) {
        self.count = v;
    }

    // string index_name = 3;


    pub fn get_index_name(&self) -> &str {
        &self.index_name
    }
    pub fn clear_index_name(&mut self) {
        self.index_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_index_name(&mut self, v: ::std::string::String) {
        self.index_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_index_name(&mut self) -> &mut ::std::string::String {
        &mut self.index_name
    }

    // Take field
    pub fn take_index_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.index_name, ::std::string::String::new())
    }

    // bool asc = 4;


    pub fn get_asc(&self) -> bool {
        self.asc
    }
    pub fn clear_asc(&mut self) {
        self.asc = false;
    }

    // Param is passed by value, moved
    pub fn set_asc(&mut self, v: bool) {
        self.asc = v;
    }

    // repeated bytes values = 6;


    pub fn get_values(&self) -> &[::std::vec::Vec<u8>] {
        &self.values
    }
    pub fn clear_values(&mut self) {
        self.values.clear();
    }

    // Param is passed by value, moved
    pub fn set_values(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_values(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.values
    }

    // Take field
    pub fn take_values(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.values, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for DiskSelected {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.total = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.count = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.index_name)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.asc = tmp;
                },
                6 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.values)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.total != 0 {
            my_size += ::protobuf::rt::value_size(1, self.total, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.count != 0 {
            my_size += ::protobuf::rt::value_size(2, self.count, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.index_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.index_name);
        }
        if self.asc != false {
            my_size += 2;
        }
        for value in &self.values {
            my_size += ::protobuf::rt::bytes_size(6, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.total != 0 {
            os.write_uint64(1, self.total)?;
        }
        if self.count != 0 {
            os.write_uint64(2, self.count)?;
        }
        if !self.index_name.is_empty() {
            os.write_string(3, &self.index_name)?;
        }
        if self.asc != false {
            os.write_bool(4, self.asc)?;
        }
        for v in &self.values {
            os.write_bytes(6, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DiskSelected {
        DiskSelected::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "total",
                |m: &DiskSelected| { &m.total },
                |m: &mut DiskSelected| { &mut m.total },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "count",
                |m: &DiskSelected| { &m.count },
                |m: &mut DiskSelected| { &mut m.count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "index_name",
                |m: &DiskSelected| { &m.index_name },
                |m: &mut DiskSelected| { &mut m.index_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "asc",
                |m: &DiskSelected| { &m.asc },
                |m: &mut DiskSelected| { &mut m.asc },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "values",
                |m: &DiskSelected| { &m.values },
                |m: &mut DiskSelected| { &mut m.values },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DiskSelected>(
                "DiskSelected",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DiskSelected {
        static instance: ::protobuf::rt::LazyV2<DiskSelected> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DiskSelected::new)
    }
}

impl ::protobuf::Clear for DiskSelected {
    fn clear(&mut self) {
        self.total = 0;
        self.count = 0;
        self.index_name.clear();
        self.asc = false;
        self.values.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DiskSelected {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DiskSelected {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RequestDiskDelete {
    // message fields
    pub database_name: ::std::string::String,
    pub view_name: ::std::string::String,
    pub constraint_json_bytes: ::std::vec::Vec<u8>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RequestDiskDelete {
    fn default() -> &'a RequestDiskDelete {
        <RequestDiskDelete as ::protobuf::Message>::default_instance()
    }
}

impl RequestDiskDelete {
    pub fn new() -> RequestDiskDelete {
        ::std::default::Default::default()
    }

    // string database_name = 1;


    pub fn get_database_name(&self) -> &str {
        &self.database_name
    }
    pub fn clear_database_name(&mut self) {
        self.database_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_database_name(&mut self, v: ::std::string::String) {
        self.database_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_database_name(&mut self) -> &mut ::std::string::String {
        &mut self.database_name
    }

    // Take field
    pub fn take_database_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.database_name, ::std::string::String::new())
    }

    // string view_name = 2;


    pub fn get_view_name(&self) -> &str {
        &self.view_name
    }
    pub fn clear_view_name(&mut self) {
        self.view_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_view_name(&mut self, v: ::std::string::String) {
        self.view_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_view_name(&mut self) -> &mut ::std::string::String {
        &mut self.view_name
    }

    // Take field
    pub fn take_view_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.view_name, ::std::string::String::new())
    }

    // bytes constraint_json_bytes = 3;


    pub fn get_constraint_json_bytes(&self) -> &[u8] {
        &self.constraint_json_bytes
    }
    pub fn clear_constraint_json_bytes(&mut self) {
        self.constraint_json_bytes.clear();
    }

    // Param is passed by value, moved
    pub fn set_constraint_json_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.constraint_json_bytes = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_constraint_json_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.constraint_json_bytes
    }

    // Take field
    pub fn take_constraint_json_bytes(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.constraint_json_bytes, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for RequestDiskDelete {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.database_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.view_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.constraint_json_bytes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.database_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.database_name);
        }
        if !self.view_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.view_name);
        }
        if !self.constraint_json_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.constraint_json_bytes);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.database_name.is_empty() {
            os.write_string(1, &self.database_name)?;
        }
        if !self.view_name.is_empty() {
            os.write_string(2, &self.view_name)?;
        }
        if !self.constraint_json_bytes.is_empty() {
            os.write_bytes(3, &self.constraint_json_bytes)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestDiskDelete {
        RequestDiskDelete::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "database_name",
                |m: &RequestDiskDelete| { &m.database_name },
                |m: &mut RequestDiskDelete| { &mut m.database_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "view_name",
                |m: &RequestDiskDelete| { &m.view_name },
                |m: &mut RequestDiskDelete| { &mut m.view_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "constraint_json_bytes",
                |m: &RequestDiskDelete| { &m.constraint_json_bytes },
                |m: &mut RequestDiskDelete| { &mut m.constraint_json_bytes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RequestDiskDelete>(
                "RequestDiskDelete",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RequestDiskDelete {
        static instance: ::protobuf::rt::LazyV2<RequestDiskDelete> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RequestDiskDelete::new)
    }
}

impl ::protobuf::Clear for RequestDiskDelete {
    fn clear(&mut self) {
        self.database_name.clear();
        self.view_name.clear();
        self.constraint_json_bytes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestDiskDelete {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestDiskDelete {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct ResponseDiskDelete {
    // message fields
    pub status: super::response::Status,
    pub msg_err: ::std::string::String,
    pub deleted: ::protobuf::SingularPtrField<DiskDeleted>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ResponseDiskDelete {
    fn default() -> &'a ResponseDiskDelete {
        <ResponseDiskDelete as ::protobuf::Message>::default_instance()
    }
}

impl ResponseDiskDelete {
    pub fn new() -> ResponseDiskDelete {
        ::std::default::Default::default()
    }

    // .comm.Status status = 1;


    pub fn get_status(&self) -> super::response::Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = super::response::Status::Ok;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: super::response::Status) {
        self.status = v;
    }

    // string msg_err = 2;


    pub fn get_msg_err(&self) -> &str {
        &self.msg_err
    }
    pub fn clear_msg_err(&mut self) {
        self.msg_err.clear();
    }

    // Param is passed by value, moved
    pub fn set_msg_err(&mut self, v: ::std::string::String) {
        self.msg_err = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_msg_err(&mut self) -> &mut ::std::string::String {
        &mut self.msg_err
    }

    // Take field
    pub fn take_msg_err(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.msg_err, ::std::string::String::new())
    }

    // .db.DiskDeleted deleted = 3;


    pub fn get_deleted(&self) -> &DiskDeleted {
        self.deleted.as_ref().unwrap_or_else(|| <DiskDeleted as ::protobuf::Message>::default_instance())
    }
    pub fn clear_deleted(&mut self) {
        self.deleted.clear();
    }

    pub fn has_deleted(&self) -> bool {
        self.deleted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deleted(&mut self, v: DiskDeleted) {
        self.deleted = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deleted(&mut self) -> &mut DiskDeleted {
        if self.deleted.is_none() {
            self.deleted.set_default();
        }
        self.deleted.as_mut().unwrap()
    }

    // Take field
    pub fn take_deleted(&mut self) -> DiskDeleted {
        self.deleted.take().unwrap_or_else(|| DiskDeleted::new())
    }
}

impl ::protobuf::Message for ResponseDiskDelete {
    fn is_initialized(&self) -> bool {
        for v in &self.deleted {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.msg_err)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.deleted)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != super::response::Status::Ok {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        if !self.msg_err.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.msg_err);
        }
        if let Some(ref v) = self.deleted.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != super::response::Status::Ok {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        if !self.msg_err.is_empty() {
            os.write_string(2, &self.msg_err)?;
        }
        if let Some(ref v) = self.deleted.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResponseDiskDelete {
        ResponseDiskDelete::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::response::Status>>(
                "status",
                |m: &ResponseDiskDelete| { &m.status },
                |m: &mut ResponseDiskDelete| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "msg_err",
                |m: &ResponseDiskDelete| { &m.msg_err },
                |m: &mut ResponseDiskDelete| { &mut m.msg_err },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DiskDeleted>>(
                "deleted",
                |m: &ResponseDiskDelete| { &m.deleted },
                |m: &mut ResponseDiskDelete| { &mut m.deleted },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ResponseDiskDelete>(
                "ResponseDiskDelete",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ResponseDiskDelete {
        static instance: ::protobuf::rt::LazyV2<ResponseDiskDelete> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ResponseDiskDelete::new)
    }
}

impl ::protobuf::Clear for ResponseDiskDelete {
    fn clear(&mut self) {
        self.status = super::response::Status::Ok;
        self.msg_err.clear();
        self.deleted.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResponseDiskDelete {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResponseDiskDelete {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct DiskDeleted {
    // message fields
    pub total: u64,
    pub count: u64,
    pub index_name: ::std::string::String,
    pub asc: bool,
    pub values: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DiskDeleted {
    fn default() -> &'a DiskDeleted {
        <DiskDeleted as ::protobuf::Message>::default_instance()
    }
}

impl DiskDeleted {
    pub fn new() -> DiskDeleted {
        ::std::default::Default::default()
    }

    // uint64 total = 1;


    pub fn get_total(&self) -> u64 {
        self.total
    }
    pub fn clear_total(&mut self) {
        self.total = 0;
    }

    // Param is passed by value, moved
    pub fn set_total(&mut self, v: u64) {
        self.total = v;
    }

    // uint64 count = 2;


    pub fn get_count(&self) -> u64 {
        self.count
    }
    pub fn clear_count(&mut self) {
        self.count = 0;
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: u64) {
        self.count = v;
    }

    // string index_name = 3;


    pub fn get_index_name(&self) -> &str {
        &self.index_name
    }
    pub fn clear_index_name(&mut self) {
        self.index_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_index_name(&mut self, v: ::std::string::String) {
        self.index_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_index_name(&mut self) -> &mut ::std::string::String {
        &mut self.index_name
    }

    // Take field
    pub fn take_index_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.index_name, ::std::string::String::new())
    }

    // bool asc = 4;


    pub fn get_asc(&self) -> bool {
        self.asc
    }
    pub fn clear_asc(&mut self) {
        self.asc = false;
    }

    // Param is passed by value, moved
    pub fn set_asc(&mut self, v: bool) {
        self.asc = v;
    }

    // repeated bytes values = 6;


    pub fn get_values(&self) -> &[::std::vec::Vec<u8>] {
        &self.values
    }
    pub fn clear_values(&mut self) {
        self.values.clear();
    }

    // Param is passed by value, moved
    pub fn set_values(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_values(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.values
    }

    // Take field
    pub fn take_values(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.values, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for DiskDeleted {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.total = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.count = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.index_name)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.asc = tmp;
                },
                6 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.values)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.total != 0 {
            my_size += ::protobuf::rt::value_size(1, self.total, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.count != 0 {
            my_size += ::protobuf::rt::value_size(2, self.count, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.index_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.index_name);
        }
        if self.asc != false {
            my_size += 2;
        }
        for value in &self.values {
            my_size += ::protobuf::rt::bytes_size(6, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.total != 0 {
            os.write_uint64(1, self.total)?;
        }
        if self.count != 0 {
            os.write_uint64(2, self.count)?;
        }
        if !self.index_name.is_empty() {
            os.write_string(3, &self.index_name)?;
        }
        if self.asc != false {
            os.write_bool(4, self.asc)?;
        }
        for v in &self.values {
            os.write_bytes(6, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DiskDeleted {
        DiskDeleted::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "total",
                |m: &DiskDeleted| { &m.total },
                |m: &mut DiskDeleted| { &mut m.total },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "count",
                |m: &DiskDeleted| { &m.count },
                |m: &mut DiskDeleted| { &mut m.count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "index_name",
                |m: &DiskDeleted| { &m.index_name },
                |m: &mut DiskDeleted| { &mut m.index_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "asc",
                |m: &DiskDeleted| { &m.asc },
                |m: &mut DiskDeleted| { &mut m.asc },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "values",
                |m: &DiskDeleted| { &m.values },
                |m: &mut DiskDeleted| { &mut m.values },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DiskDeleted>(
                "DiskDeleted",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DiskDeleted {
        static instance: ::protobuf::rt::LazyV2<DiskDeleted> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DiskDeleted::new)
    }
}

impl ::protobuf::Clear for DiskDeleted {
    fn clear(&mut self) {
        self.total = 0;
        self.count = 0;
        self.index_name.clear();
        self.asc = false;
        self.values.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DiskDeleted {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DiskDeleted {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rdb/disk.proto\x12\x02db\x1a\x13comm/response.proto\"{\n\x0fRequestDi\
    skInto\x12#\n\rdatabase_name\x18\x01\x20\x01(\tR\x0cdatabaseName\x12\x1b\
    \n\tview_name\x18\x02\x20\x01(\tR\x08viewName\x12\x10\n\x03key\x18\x03\
    \x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x04\x20\x01(\x0cR\x05value\"d\
    \n\x0eRequestDiskOut\x12#\n\rdatabase_name\x18\x01\x20\x01(\tR\x0cdataba\
    seName\x12\x1b\n\tview_name\x18\x02\x20\x01(\tR\x08viewName\x12\x10\n\
    \x03key\x18\x03\x20\x01(\tR\x03key\"\x84\x01\n\x0fRequestDiskIOut\x12#\n\
    \rdatabase_name\x18\x01\x20\x01(\tR\x0cdatabaseName\x12\x1b\n\tview_name\
    \x18\x02\x20\x01(\tR\x08viewName\x12\x1d\n\nindex_name\x18\x03\x20\x01(\
    \tR\tindexName\x12\x10\n\x03key\x18\x04\x20\x01(\tR\x03key\"f\n\x0fRespo\
    nseDiskOut\x12$\n\x06status\x18\x01\x20\x01(\x0e2\x0c.comm.StatusR\x06st\
    atus\x12\x17\n\x07msg_err\x18\x02\x20\x01(\tR\x06msgErr\x12\x14\n\x05val\
    ue\x18\x03\x20\x01(\x0cR\x05value\"g\n\x11RequestDiskRemove\x12#\n\rdata\
    base_name\x18\x01\x20\x01(\tR\x0cdatabaseName\x12\x1b\n\tview_name\x18\
    \x02\x20\x01(\tR\x08viewName\x12\x10\n\x03key\x18\x03\x20\x01(\tR\x03key\
    \"\x89\x01\n\x11RequestDiskSelect\x12#\n\rdatabase_name\x18\x01\x20\x01(\
    \tR\x0cdatabaseName\x12\x1b\n\tview_name\x18\x02\x20\x01(\tR\x08viewName\
    \x122\n\x15constraint_json_bytes\x18\x03\x20\x01(\x0cR\x13constraintJson\
    Bytes\"\x81\x01\n\x12ResponseDiskSelect\x12$\n\x06status\x18\x01\x20\x01\
    (\x0e2\x0c.comm.StatusR\x06status\x12\x17\n\x07msg_err\x18\x02\x20\x01(\
    \tR\x06msgErr\x12,\n\x08selected\x18\x03\x20\x01(\x0b2\x10.db.DiskSelect\
    edR\x08selected\"\x83\x01\n\x0cDiskSelected\x12\x14\n\x05total\x18\x01\
    \x20\x01(\x04R\x05total\x12\x14\n\x05count\x18\x02\x20\x01(\x04R\x05coun\
    t\x12\x1d\n\nindex_name\x18\x03\x20\x01(\tR\tindexName\x12\x10\n\x03asc\
    \x18\x04\x20\x01(\x08R\x03asc\x12\x16\n\x06values\x18\x06\x20\x03(\x0cR\
    \x06values\"\x89\x01\n\x11RequestDiskDelete\x12#\n\rdatabase_name\x18\
    \x01\x20\x01(\tR\x0cdatabaseName\x12\x1b\n\tview_name\x18\x02\x20\x01(\t\
    R\x08viewName\x122\n\x15constraint_json_bytes\x18\x03\x20\x01(\x0cR\x13c\
    onstraintJsonBytes\"~\n\x12ResponseDiskDelete\x12$\n\x06status\x18\x01\
    \x20\x01(\x0e2\x0c.comm.StatusR\x06status\x12\x17\n\x07msg_err\x18\x02\
    \x20\x01(\tR\x06msgErr\x12)\n\x07deleted\x18\x03\x20\x01(\x0b2\x0f.db.Di\
    skDeletedR\x07deleted\"\x82\x01\n\x0bDiskDeleted\x12\x14\n\x05total\x18\
    \x01\x20\x01(\x04R\x05total\x12\x14\n\x05count\x18\x02\x20\x01(\x04R\x05\
    count\x12\x1d\n\nindex_name\x18\x03\x20\x01(\tR\tindexName\x12\x10\n\x03\
    asc\x18\x04\x20\x01(\x08R\x03asc\x12\x16\n\x06values\x18\x06\x20\x03(\
    \x0cR\x06valuesBJ\n\x1dcn.aberic.george.protocols.dbB\tDiskProtoZ\x1egit\
    hub.com/george/protocols/dbb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
