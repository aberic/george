// This file is generated by rust-protobuf 2.18.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `db/enums.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_2;

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub enum Engine {
    None = 0,
    Increment = 1,
    Sequence = 2,
    Disk = 3,
    Block = 4,
}

impl ::protobuf::ProtobufEnum for Engine {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Engine> {
        match value {
            0 => ::std::option::Option::Some(Engine::None),
            1 => ::std::option::Option::Some(Engine::Increment),
            2 => ::std::option::Option::Some(Engine::Sequence),
            3 => ::std::option::Option::Some(Engine::Disk),
            4 => ::std::option::Option::Some(Engine::Block),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Engine] = &[
            Engine::None,
            Engine::Increment,
            Engine::Sequence,
            Engine::Disk,
            Engine::Block,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Engine>("Engine", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Engine {
}

impl ::std::default::Default for Engine {
    fn default() -> Self {
        Engine::None
    }
}

impl ::protobuf::reflect::ProtobufValue for Engine {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub enum KeyType {
    String = 0,
    UInt = 1,
    Int = 2,
    Float = 3,
    Bool = 4,
    Nonsupport = 5,
}

impl ::protobuf::ProtobufEnum for KeyType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<KeyType> {
        match value {
            0 => ::std::option::Option::Some(KeyType::String),
            1 => ::std::option::Option::Some(KeyType::UInt),
            2 => ::std::option::Option::Some(KeyType::Int),
            3 => ::std::option::Option::Some(KeyType::Float),
            4 => ::std::option::Option::Some(KeyType::Bool),
            5 => ::std::option::Option::Some(KeyType::Nonsupport),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [KeyType] = &[
            KeyType::String,
            KeyType::UInt,
            KeyType::Int,
            KeyType::Float,
            KeyType::Bool,
            KeyType::Nonsupport,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<KeyType>("KeyType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for KeyType {
}

impl ::std::default::Default for KeyType {
    fn default() -> Self {
        KeyType::String
    }
}

impl ::protobuf::reflect::ProtobufValue for KeyType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0edb/enums.proto\x12\x02db*D\n\x06Engine\x12\x08\n\x04None\x10\0\x12\
    \r\n\tIncrement\x10\x01\x12\x0c\n\x08Sequence\x10\x02\x12\x08\n\x04Disk\
    \x10\x03\x12\t\n\x05Block\x10\x04*M\n\x07KeyType\x12\n\n\x06String\x10\0\
    \x12\x08\n\x04UInt\x10\x01\x12\x07\n\x03Int\x10\x02\x12\t\n\x05Float\x10\
    \x03\x12\x08\n\x04Bool\x10\x04\x12\x0e\n\nNonsupport\x10\x05BJ\n\x1dcn.a\
    beric.george.protocols.dbB\tEnumProtoZ\x1egithub.com/george/protocols/db\
    b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
